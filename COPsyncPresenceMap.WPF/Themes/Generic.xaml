<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:COPsyncPresenceMap.WPF.CustomControls">

    <!--  Button style -->
    <Style TargetType="{x:Type Button}" x:Key="WindowButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                            x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0,0,10,0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{DynamicResource MainColor}" />
        <Setter Property="Margin" Value="0,2,3,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window style -->
    <Style TargetType="{x:Type local:CustomWindow}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Silver"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomWindow}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Row="0" Grid.ColumnSpan="2">
                                    <Border.Background>
                                        <SolidColorBrush Color="#DDDDDD"></SolidColorBrush>
                                    </Border.Background>
                                </Border>

                                <Rectangle x:Name="moveRectangle" Fill="Transparent" Grid.Row="0" Grid.Column="0"/>
                                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                                    <Button x:Name="minimizeButton" Style="{StaticResource WindowButtonStyle}" Content="0" />
                                    <Button x:Name="restoreButton" Style="{StaticResource WindowButtonStyle}" Content="1" />
                                    <Button x:Name="closeButton" Style="{StaticResource WindowButtonStyle}" Content="r" />
                                </StackPanel>
                                <Grid Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2" Margin="0,5,0,0">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Grid>
                            </Grid>
                            <!-- Resize grid to be inserted here -->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="restoreButton" Property="Content" Value="1" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="restoreButton" Property="Content" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ImageButton style -->
    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}" >
                    <Button BorderThickness="0"
                            Background="{TemplateBinding Background}"
                            Padding="0"
                            Command="{TemplateBinding Command}"
                            CommandParameter="{TemplateBinding CommandParameter}">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{TemplateBinding Image}"
                                   Width="{TemplateBinding ImageWidth}"
                                   Height="{TemplateBinding ImageHeight}"
                                   Visibility="{TemplateBinding Image}"
                                   VerticalAlignment="Center" />
                        </StackPanel>
                    </Button>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- CustomToggleButton style -->
    <Style TargetType="{x:Type local:CustomToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomToggleButton}" >
                    <Border
                        Name="customControlBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        Background="{TemplateBinding Background}"
                        Padding="0">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Image x:Name="InnerImage"
                                Source="{TemplateBinding Image}"
                                Width="{TemplateBinding ImageWidth}"
                                Height="{TemplateBinding ImageHeight}"
                                Visibility="{TemplateBinding Image}"
                                VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerImage"             Property="Source"       Value="{Binding Path=ImageActive, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="customControlBorder"    Property="Background"   Value="{Binding Path=OnActiveBackground,RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">

            </Trigger>

        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:ExpandableToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ExpandableToggleButton" >
                    <DockPanel>
                        <Image Name="ExpandableIcon"
                               DockPanel.Dock="{TemplateBinding ImagePosition}"
                               HorizontalAlignment="Right" Source="{TemplateBinding Image}"
                               Width="{TemplateBinding ImageWidth}"
                               Height="{TemplateBinding ImageHeight}"
                               Stretch="UniformToFill"/>
                        <Label x:Name="lblExpandableToggleButtonText"
                               Content="{TemplateBinding Text}"
                               Foreground="{TemplateBinding Foreground}"
                               FontSize="{TemplateBinding FontSize}"
                               FontWeight="{TemplateBinding FontWeight}"
                               Padding="5,0"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandableIcon" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="{Binding Path=ImageRotation,RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- On/Off Switch -->
    <Style TargetType="{x:Type local:SwitchOnOffButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SwitchOnOffButton">
                    <Grid Width="35" Height="20">
                        <Border Name="BrdBackBorder" Background="{TemplateBinding OffBackground}" CornerRadius="2.5">
                            <Grid>
                                <TextBlock Text="OFF" Name="TxtStatus"  HorizontalAlignment="Right" Margin="2" FontSize="7" Foreground="{TemplateBinding OffForeground}" VerticalAlignment="Center"/>
                                <Border Name="BrdScuare" Width="16" Height="16" CornerRadius="2.5" Background="{TemplateBinding OffSwitchColor}" HorizontalAlignment="Left" Margin="2"></Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="BrdScuare" Property="Background" Value="{Binding Path=OnSwitchColor, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="BrdScuare" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="TxtStatus" Property="Foreground" Value="{Binding Path=OnForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="TxtStatus" Property="Text" Value="ON"></Setter>
                            <Setter TargetName="TxtStatus" Property="HorizontalAlignment" Value="Left"></Setter>
                            <Setter TargetName="BrdBackBorder" Property="Background" Value="{Binding Path=OnBackground, RelativeSource={RelativeSource TemplatedParent}}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
